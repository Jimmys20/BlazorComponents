@page "/"

<PageTitle>Index</PageTitle>

<div class="h-100 d-flex flex-column">
    <div class="mb-1">
        <button class="btn btn-primary" @onclick="Add">Add</button>
        <button class="btn btn-primary" @onclick="Swap">Swap</button>
    </div>

    <JGridLayout T="Customer"
                 Items="_customers"
                 ItemDropped="OnItemDropped"
                 IndexField="@((customer) => customer.Index)"
                 CanDrop="CanDrop"
                 Class="flex-grow-1"
                 ColumnGap="0.25rem"
                 RowGap="0.25rem"
                 Draggable="true">

        <Columns>
            <JGridLayoutColumn Width="minmax(0, 1fr)" />
            <JGridLayoutColumn Width="minmax(0, 1fr)" />
            <JGridLayoutColumn Width="minmax(0, 1fr)" />
            <JGridLayoutColumn Width="minmax(0, 1fr)" />
        </Columns>

        <Rows>
            <JGridLayoutRow Height="minmax(0, 1fr)" />
            <JGridLayoutRow Height="minmax(0, 1fr)" />
            <JGridLayoutRow Height="minmax(0, 1fr)" />
            <JGridLayoutRow Height="minmax(0, 1fr)" />
        </Rows>

        <ItemTemplate>
            <div class="card" style="height: 100%;">
                <div class="card-header bg-primary text-white">
                    @context.Index
                </div>
                <div class="card-body">
                    <p>@context.Name</p>

                    @if (context.Id == 4)
                    {
                        <p><b>Is not allowed to drop.</b></p>
                    }

                    <button class="btn btn-danger"
                            @onclick="() => Remove(context)">
                        Remove
                    </button>
                </div>
            </div>
        </ItemTemplate>
    </JGridLayout>

</div>

@code {
    private const int MaxCapacity = 16;

    private List<Customer> _customers;

    protected override void OnInitialized()
    {
        _customers = CustomerService.GetCustomers().ToList();
    }

    private void OnItemDropped(DropEventArgs<Customer> args)
    {
        var droppedCustomer = args.Item;
        var droppedIndex = args.Index;

        var existingCustomer = _customers.FirstOrDefault(c => c.Index == droppedIndex);

        if (existingCustomer != null)
        {
            existingCustomer.Index = droppedCustomer.Index;
        }

        droppedCustomer.Index = droppedIndex;
    }

    private bool CanDrop(Customer customer, int index)
    {
        if (customer.Id == 4 || index % 4 == 3)
        {
            return false;
        }

        return true;
    }

    private void Remove(Customer customer)
    {
        _customers.Remove(customer);
    }

    private void Add()
    {
        var emptyIndex = -1;

        for (var i = 0; i < MaxCapacity; i++)
        {
            var customer = _customers.FirstOrDefault(c => c.Index == i);

            if (customer == null)
            {
                emptyIndex = i;
                break;
            }
        }

        if (emptyIndex == -1) return;

        var id = new Random().NextInt64(1000, 2000);

        _customers.Add(new Customer 
        {
            Id = id,
            Name = $"New customer {id}",
            Index = emptyIndex
        });
    }

    private void Swap()
    {
        _customers[0].Index = 1;
    }
}
